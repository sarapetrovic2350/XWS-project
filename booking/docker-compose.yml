version: "3.8"

services:

  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      RESERVATION_SERVICE_DOMAIN: ${RESERVATION_SERVICE_DOMAIN}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      ACCOMMODATION_SERVICE_DOMAIN: ${ACCOMMODATION_SERVICE_DOMAIN}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      RATING_SERVICE_DOMAIN: ${RATING_SERVICE_DOMAIN}
      RATING_SERVICE_PORT: ${RATING_SERVICE_PORT}
    networks:
      - network

  user-service:
    image: user-service
    container_name: user-service
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    restart: on-failure
    environment:
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      USER_DB_DOMAIN: ${USER_DB_DOMAIN}
      USER_DB_PORT: ${USER_DB_PORT}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      RESERVATION_SERVICE_DOMAIN: ${RESERVATION_SERVICE_DOMAIN}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      ACCOMMODATION_SERVICE_DOMAIN: ${ACCOMMODATION_SERVICE_DOMAIN}
    depends_on:
      - user_db
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network
    ports:
      - "27017:27017"

  reservation_db:
    image: mongo
    container_name: reservation_db
    restart: on-failure
    networks:
      - network

  reservation-service:
    image: reservation-service
    container_name: reservation-service
    build:
      context: .
      dockerfile: ./reservation-service/Dockerfile
    restart: on-failure
    environment:
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      RESERVATION_DB_DOMAIN: ${RESERVATION_DB_DOMAIN}
      RESERVATION_DB_PORT: ${RESERVATION_DB_PORT}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      ACCOMMODATION_SERVICE_DOMAIN: ${ACCOMMODATION_SERVICE_DOMAIN}
    depends_on:
      - reservation_db
    networks:
      - network

  accommodation-service:
    image: accommodation-service
    container_name: accommodation-service
    build:
      context: .
      dockerfile: ./accommodation-service/Dockerfile
    restart: on-failure
    environment:
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      ACCOMMODATION_DB_DOMAIN: ${ACCOMMODATION_DB_DOMAIN}
      ACCOMMODATION_DB_PORT: ${ACCOMMODATION_DB_PORT}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      RESERVATION_SERVICE_DOMAIN: ${RESERVATION_SERVICE_DOMAIN}
    depends_on:
      - accommodation_db
    networks:
      - network

  accommodation_db:
    image: mongo
    container_name: accommodation_db
    restart: on-failure
    networks:
      - network

  rating-service:
    image: rating-service
    container_name: rating-service
    build:
      context: .
      dockerfile: ./rating-service/Dockerfile
    restart: on-failure
    environment:
      RATING_SERVICE_PORT: ${RATING_SERVICE_PORT}
      RATING_DB_DOMAIN: ${RATING_DB_DOMAIN}
      RATING_DB_PORT: ${RATING_DB_PORT}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      RESERVATION_SERVICE_DOMAIN: ${RESERVATION_SERVICE_DOMAIN}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      ACCOMMODATION_SERVICE_DOMAIN: ${ACCOMMODATION_SERVICE_DOMAIN}
    depends_on:
      - rating_db
    networks:
      - network

  rating_db:
    image: mongo
    container_name: rating_db
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge